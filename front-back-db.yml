apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
data:
  DATABASE_URI: mongodb://mongodb.default.svc.cluster.local:27017/period-tracker
  REACT_APP_BACKENDURL: "/api/"

---

apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
type: Opaque
stringData:
  JWT_SECRET: "secretKey"

---

apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: default
spec:
  mtls:
    mode: STRICT

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: yvonnelu/backend-backend:latest
        ports:
        - containerPort: 3001
        env:
        - name: DATABASE_NAME
          value: "period-tracker"
        - name: DATABASE_URI
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: DATABASE_URI
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: JWT_SECRET
        - name: PORT
          value: "3001"
---

apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  ports:
  - protocol: TCP
    port: 3001
    targetPort: 3001
  type: ClusterIP

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: backend-mtls
  namespace: default
spec:
  host: backend-service.default.svc.cluster.local
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL  # Utilise mTLS pour ce service

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:latest
        ports:
        - containerPort: 27017

---

apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  selector:
    app: mongodb
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017
  type: ClusterIP

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: mongodb-mtls
  namespace: default
spec:
  host: mongodb.default.svc.cluster.local
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL  # Utilise mTLS pour ce service

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: periodtracker-front
spec:
  replicas: 1
  selector:
    matchLabels:
      app: periodtracker-front
  template:
    metadata:
      labels:
        app: periodtracker-front
    spec:
      containers:
      - name: periodtracker-front
        image: ynafi/periodtracker-front:2
        imagePullPolicy: Always
        env:
        - name: REACT_APP_BACKENDURL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: REACT_APP_BACKENDURL

---

apiVersion: v1
kind: Service
metadata:
  name: periodtracker-front-service
spec:
  ports:
    - name: http
      targetPort: 3000
      port: 3000
  selector:
    app: periodtracker-front
  type: NodePort

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: front-mtls
  namespace: default
spec:
  host: periodtracker-front-service.default.svc.cluster.local
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL  # Utilise mTLS pour ce service

---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: frontend-gateway
spec:
  selector:
    istio: ingressgateway
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: frontend-virtualservice
spec:
  hosts:
    - "*"  # Accepte toutes les requêtes
  gateways:
    - frontend-gateway
  http:
    - match:
        - uri:
            prefix: "/api/"        # Toute URL qui commence par "/api" est routée vers le backend NestJS
      route:
        - destination:
            #host: http://backend-service.default.svc.cluster.local/  # Nom du service backend (NestJS)
            host: backend-service
            port:
              number: 3001         # Port sur lequel le service backend est exposé
    - match:
        - uri:
            prefix: "/"  # Tout le trafic va vers le frontend
      corsPolicy:
        allowOrigins:
          - exact: "*"  # Origine autorisée (ex: ton frontend en local)
        allowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        allowHeaders:
          - Authorization
          - Content-Type
        exposeHeaders:
          - Authorization
          - Content-Length
        maxAge: "24h"  # Durée de mise en cache des requêtes OPTIONS
        allowCredentials: true  # Permet l'envoi de cookies et d'identifiants
      route:
        - destination:
            host: periodtracker-front-service.default.svc.cluster.local # le service front
            port:
              number: 3000

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-sa
  namespace: default

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: backend-role
  namespace: default
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets", "pods", "services"]
    verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backend-rolebinding
  namespace: default
subjects:
  - kind: ServiceAccount
    name: backend-sa
    namespace: default
roleRef:
  kind: Role
  name: backend-role
  apiGroup: rbac.authorization.k8s.io
